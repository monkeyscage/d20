pragma solidity 0.4.11;

contract SuperOwned{

address public owner;
address public superowner;

    function SuperOwned() {
        owner = msg.sender;
    }

    modifier onlyOwner { //superowner is more important than owner
        if(superowner!=address(0)){
        if (msg.sender != superowner) throw;
        }else{
        if (msg.sender != owner) throw;
        }
        _;
    }

    //you can transfer ownership only if NO superowner is declared
    function transferOwnership(address newOwner) onlyOwner returns(bool){
        owner = newOwner;
        return true;
    }
    
    //you can set a superowner only if NO superowner is already declared
    function setSuperOwner(address newSuperOwner) onlyOwner {
        superowner = newSuperOwner;    //can be an address or 0x0
    }
    

}

contract inventory{

}

contract abilities{
uint public strength;
uint public dexterity;
uint public constitution;
uint public intelligence;
uint public wisdom;
uint public charisma;
}

contract player is SuperOwned is inventory is abilities{

uint public experience;
uint public health;
address[] public inventory;
address[] public slots;

function player(){

}

function talk(){

}

function interact(){

}

function attack(){

}

function magicattack(){

}

function steal(){

}

function resurrect(){

}


function giveMagicItem() onlyOwner{

}

function giveItem() onlyOwner{

}

function takeMagicItem(address item, uint inventory) onlyOwner{

}

function takeItem(address item, uint inventory) onlyOwner{

}

function suicide() onlyOwner{

}

function inventory(uint i)constant returns(address){
return inventory[i];
}

}
